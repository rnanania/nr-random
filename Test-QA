//Write a function that computes the n-th fibonacci series numbers
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89

const fib = n => {
  if ( n < 1 ) return 0;
  if ( n < 3 ) return 1;
  let [prev, curr] = [1, 1];
  while ( n > 2 ) {
    [prev, curr] = [curr, prev+curr];
    n--;
  }
  return curr;
};


//Write a recursive function that computes the n-th fibonacci series numbers

const fibRec = n => {
  if ( n < 1 ) return 0;
  if ( n < 3 ) return 1;
  return fibRec(n-1) + fibRec(n-2);
};


/* Summary : Number to possible key strings conversion */
/* For example
  Input - 23
  Output - ad, ae, af, bd, be, bf, cd, ce, cf

  '0': [],
  '1': [],
  '2': ['a', 'b', 'c'],
  '3': ['d', 'e', 'f'],
  '4': ['g', 'h', 'i'],
  '5': ['j', 'k', 'l'],
  '6': ['m', 'n', 'o'],
  '7': ['p', 'q', 'r'],
  '8': ['t', 'u', 'v'],
  '9': ['w', 'x', 'y', 'z']
*/

let keyMap = {
  '0': [],
  '1': [],
  '2': ['a', 'b', 'c'],
  '3': ['d', 'e', 'f'],
  '4': ['g', 'h', 'i'],
  '5': ['j', 'k', 'l'],
  '6': ['m', 'n', 'o'],
  '7': ['p', 'q', 'r'],
  '8': ['t', 'u', 'v'],
  '9': ['w', 'x', 'y', 'z']
};

// Main function to get the possible combination based on input
function getPossibleCombination(num) {
  let possibleCombination = [];

  // Error Handling
  if (isNaN(num) || Number(num) < 0) {
    console.info("We do support valid postive numbers only !!");
    return [];
  }

  // Convert number to string to do string operations on it
  const numToString = String(num);

  // Loop through each digit from input number
  for(let digit of numToString) {
    digitToLetters(digit,possibleCombination);
  }

  return possibleCombination;
}



function digitToLetters(digit, possibleCombination) {
  // Get the key to letter mapping
  const letters = keyMap[digit];
  let combCount = possibleCombination.length;

  // Ignore empty collection like 0/1 mapping
  if(!letters.length)
    return;

  // First time just copy the letters
  if(combCount === 0) {
    for(const letter of letters){
      possibleCombination.push(letter);
    }
  // Second time combine the older letters with new
  } else {
    while(combCount > 0){
      const firstItem = possibleCombination.shift();

      for(const letter of letters){
        possibleCombination.push(firstItem+letter);
      }
      combCount--;
    }
  }
}


/* Bond Price to Tick conversion
$1 = 32 ticks

Input - 90.0
Output - 90-0

Input - 90.03125
Output - 90-1

Input - 90.06250
Output - 90-2

Input - 90.03125 + 0.015625
Output - 90-1+

Input - 90.03125 + 0.015620
Output - 90-1
*/


/* Note : Half tick  = 1/64 = 0.015625
  So we have to make sure we do upto six decimal precision in this code.
*/

// Price to Tick format conversion
function priceToTick(price){
  // Error handling for a valid number
  if(isNaN(price)){
    console.info("Not a valid price !!");
    return;
  }

  price = Number(price).toFixed(6);
  let numToString = String(price);
  let prices = numToString.split('.');

  let tick = Number(price - prices[0]).toFixed(6) * 32;
  let roundTick = Math.round(tick);
  let floorTick = Math.floor(tick);

  return prices[0] + '-' + ((roundTick > tick) ? floorTick + '+' : floorTick);
}

console.info(priceToTick(90.0)); //90-0
console.info(priceToTick(90.03125)); //90-1
console.info(priceToTick(90.06250)); //90-2

// Exact half way between 1 and 2 tick
console.info(priceToTick(Number(90.031250 + 0.015625))); // 90-1+

// Less than half way between 1 and 2 tick
console.info(priceToTick(Number(90.031250 + 0.015620))); // 90-1
